diff -Naurp CoreELEC-settings/src/resources/bin/tvlink-get.sh CoreELEC-settings-patch/src/resources/bin/tvlink-get.sh
--- CoreELEC-settings/src/resources/bin/tvlink-get.sh	1970-01-01 03:00:00.000000000 +0300
+++ CoreELEC-settings-patch/src/resources/bin/tvlink-get.sh	2022-02-19 09:12:40.000000000 +0200
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+# SPDX-License-Identifier: GPL-2.0
+# Copyright (C) 2011-present Alex@ELEC (https://alexelec.tv)
+
+URL_MAIN="https://github.com/AlexELEC/TVLINK-arm7/releases/download"
+URL_LAST="https://github.com/AlexELEC/TVLINK-arm7/releases/latest"
+
+TVL_DIR="/storage/.config/tvlink"
+TEMP_DIR="/storage/.kodi/temp"
+
+BACKUP_DIR="/tmp/tvlink"
+
+################################ MAIN ##########################################
+
+UPD_VER=`curl -s "$URL_LAST" | sed 's|.*tag\/||; s|">redirected.*||')`
+
+# download URL
+  if [ "$1" == "url" ] ; then
+      if curl --output /dev/null --silent --head --fail "$URL_MAIN/$UPD_VER/TVLINK-$UPD_VER.tar.bz2"
+      then
+        echo "$URL_MAIN/$UPD_VER/TVLINK-$UPD_VER.tar.bz2"
+      else
+        echo "error"
+      fi
+
+# unpack to TVL_DIR
+  elif [ "$1" == "install" ] ; then
+      rm -fR $TVL_DIR
+      mkdir -p $TVL_DIR
+      tar -jxf $TEMP_DIR/TVLINK-$UPD_VER.tar.bz2 -C $TVL_DIR
+      rm -f $TEMP_DIR/TVLINK-$UPD_VER.tar.bz2
+
+  fi
+
+exit 0
diff -Naurp CoreELEC-settings/src/resources/lib/modules/tvserver.py CoreELEC-settings-patch/src/resources/lib/modules/tvserver.py
--- CoreELEC-settings/src/resources/lib/modules/tvserver.py	1970-01-01 03:00:00.000000000 +0300
+++ CoreELEC-settings-patch/src/resources/lib/modules/tvserver.py	2022-02-19 09:11:48.000000000 +0200
@@ -0,0 +1,156 @@
+# SPDX-License-Identifier: GPL-2.0-or-later
+# Copyright (C) 2011-present AlexELEC (https://alexelec.tv)
+
+import os
+import glob
+import xbmcgui
+import xbmcaddon
+
+__scriptid__ = 'service.coreelec.settings'
+__addon__ = xbmcaddon.Addon(id=__scriptid__)
+xbmcDialog = xbmcgui.Dialog()
+
+class tvserver:
+
+    ENABLED = False
+    TVLINK_GET_SRC = None
+
+    menu = {'91': {
+        'name': 43000,
+        'menuLoader': 'load_menu',
+        'listTyp': 'list',
+        'InfoText': 4300,
+        }}
+
+    def __init__(self, oeMain):
+        try:
+            oeMain.dbg_log('tvserver::__init__', 'enter_function', oeMain.LOGDEBUG)
+
+            self.struct = {
+                'tvlink': {
+                    'order': 1,
+                    'name': 42025,
+                    'not_supported': [],
+                    'settings': {
+                        'enable_tvlink': {
+                            'order': 1,
+                            'name': 42026,
+                            'value': '0',
+                            'action': 'initialize_tvlink',
+                            'type': 'bool',
+                            'InfoText': 4226,
+                        },
+                    },
+                },
+            }
+
+            self.oe = oeMain
+
+            oeMain.dbg_log('tvserver::__init__', 'exit_function', oeMain.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::__init__', 'ERROR: (%s)' % repr(e))
+
+    def start_service(self):
+        try:
+            self.oe.dbg_log('tvserver::start_service', 'enter_function', self.oe.LOGDEBUG)
+            self.load_values()
+            self.initialize_tvlink(service=1)
+            self.oe.dbg_log('tvserver::start_service', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::start_service', 'ERROR: (%s)' % repr(e))
+
+    def stop_service(self):
+        try:
+            self.oe.dbg_log('tvserver::stop_service', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.dbg_log('tvserver::stop_service', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::stop_service', 'ERROR: (' + repr(e) + ')')
+
+    def do_init(self):
+        try:
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', self.oe.LOGDEBUG)
+            self.load_values()
+            self.oe.dbg_log('tvserver::do_init', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::do_init', 'ERROR: (%s)' % repr(e))
+
+    def set_value(self, listItem):
+        try:
+            self.oe.dbg_log('tvserver::set_value', 'enter_function', self.oe.LOGDEBUG)
+            self.struct[listItem.getProperty('category')]['settings'][listItem.getProperty('entry')]['value'] = listItem.getProperty('value')
+            self.oe.dbg_log('tvserver::set_value', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::set_value', 'ERROR: (' + repr(e) + ')')
+
+    def load_menu(self, focusItem):
+        try:
+            self.oe.dbg_log('tvserver::load_menu', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.winOeMain.build_menu(self.struct)
+            self.oe.dbg_log('tvserver::load_menu', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::load_menu', 'ERROR: (%s)' % repr(e))
+
+    def load_values(self):
+        try:
+            self.oe.dbg_log('tvserver::load_values', 'enter_function', self.oe.LOGDEBUG)
+
+            self.struct['tvlink']['settings']['enable_tvlink']['value'] = self.oe.get_service_state('tvlink')
+
+            self.oe.dbg_log('tvserver::load_values', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::load_values', 'ERROR: (%s)' % repr(e))
+
+    def initialize_tvlink(self, **kwargs):
+        try:
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.set_busy(1)
+            if 'listItem' in kwargs:
+                self.set_value(kwargs['listItem'])
+            options = {}
+            state = 0
+            if self.struct['tvlink']['settings']['enable_tvlink']['value'] == '1':
+
+                if not os.path.exists('/storage/.config/tvlink/tvlink'):
+                    tvl_status = self.get_tvl_source()
+                    if tvl_status == 'OK':
+                        self.oe.notify(self.oe._(32363), 'Starting TVLINK...')
+                    else:
+                        self.struct['tvlink']['settings']['enable_tvlink']['value'] = '0'
+                        self.oe.set_busy(0)
+                        answer = xbmcDialog.ok('Install TVLINK',
+                            'Error: The program is not installed, try again!')
+                        return
+
+                state = 1
+            self.oe.set_service('tvlink', options, state)
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.set_busy(0)
+            self.oe.dbg_log('tvserver::initialize_tvlink', 'ERROR: (%s)' % repr(e), self.oe.LOGDEBUG)
+
+    def get_tvl_source(self, listItem=None, silent=False):
+        try:
+            self.oe.dbg_log('tvserver::get_tvl_source', 'enter_function', self.oe.LOGDEBUG)
+            self.download_file = self.oe.execute(self.TVLINK_GET_SRC + ' url', 1).strip()
+            self.oe.set_busy(0)
+            if hasattr(self, 'download_file'):
+                downloaded = self.oe.download_file(self.download_file, self.oe.TEMP + self.download_file.split('/')[-1], silent)
+                if not downloaded is None:
+                    self.oe.notify(self.oe._(32363), 'Install TVLINK...')
+                    self.oe.set_busy(1)
+                    self.oe.execute(self.TVLINK_GET_SRC + ' install', 0)
+                    self.oe.set_busy(0)
+                    self.oe.dbg_log('tvserver::get_tvl_source', 'exit_function', self.oe.LOGDEBUG)
+                    return 'OK'
+            self.oe.dbg_log('tvserver::get_tvl_source', 'exit_function', self.oe.LOGDEBUG)
+            return 'ERROR'
+        except Exception as e:
+            self.oe.dbg_log('tvserver::get_tvl_source', 'ERROR: (%s)' % repr(e), self.oe.LOGDEBUG)
+
+    def exit(self):
+        try:
+            self.oe.dbg_log('tvserver::exit', 'enter_function', self.oe.LOGDEBUG)
+            self.oe.dbg_log('tvserver::exit', 'exit_function', self.oe.LOGDEBUG)
+        except Exception as e:
+            self.oe.dbg_log('tvserver::exit', 'ERROR: (%s)' % repr(e), self.oe.LOGDEBUG)
